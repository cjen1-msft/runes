#!/usr/bin/env python3

import argparse
import sys
import os
import shlex

from subprocess import run, PIPE

from enum import Enum

def get_ssh_key(ssh_key):
    with open(os.path.expanduser(ssh_key), "r") as f:
        return f.read().strip()


def run_aci_public_image(args):
    print("Using public template")
    az_cmd = [
        "az", "deployment", "group", "create",
        "--resource-group", args.resource_group,
        "--template-file", f"{args.image_type}/public-template.json",
        "--parameters", f"image={args.image}",
        "--parameters", f"ssh={get_ssh_key(args.ssh_key)}",
        "--parameters", f"name={args.name}",
        "--parameters", f"region={args.region}",
        "--parameters", f"ram={args.ram}",
        "--parameters", f"cpus={args.cpus}",
    ]
    print("Running:")
    print(shlex.join(az_cmd))
    run(az_cmd, check=True)


def run_aci_azure_image(args):
    print("Using azure auth template")
    acr = args.image.split(".azurecr.io")[0]
    acr_token_cmd =[
        "az", "acr", "login",
        "--name", acr,
        "--expose-token",
        "--output", "tsv",
        "--query", "accessToken",
    ]
     
    acr_token = (
        run(
            acr_token_cmd,
            check=True,
            stdout=PIPE,
        )
        .stdout.strip()
        .decode("utf-8")
    )
    az_cmd = [
        "az", "deployment", "group", "create",
        "--resource-group", args.resource_group,
        "--template-file", f"{args.image_type}/private-template.json",
        "--parameters", f"image={args.image}",
        "--parameters", f"ssh={get_ssh_key(args.ssh_key)}",
        "--parameters", f"name={args.name}",
        "--parameters", f"acr-repo={acr}",
        "--parameters", f"acr-token={acr_token}",
        "--parameters", f"region={args.region}",
        "--parameters", f"ram={args.ram}",
        "--parameters", f"cpus={args.cpus}",
    ]
    print("Running:")
    print(shlex.join(az_cmd))
    run(az_cmd, check=True)


def default_container_name():
    return f"test-{os.urandom(2).hex()}"


if __name__ == "__main__":
    parser = argparse.ArgumentParser(
        description="Start up a ACI container using the suppplied image"
    )
    parser.add_argument(
        "--image", help="The image to use for the container", required=True
    )
    parser.add_argument(
        "--azure-auth", help="Use az command to do authentication", action="store_true"
    )
    parser.add_argument(
        "--resource-group",
        help="The resource group to use for the container",
        required=True,
    )
    parser.add_argument(
        "--ssh-key",
        help="The ssh key to use for the container",
        default="~/.ssh/id_rsa.pub",
    )
    parser.add_argument(
        "--name",
        help="The name to use for the container",
        default=default_container_name(),
    )

    parser.add_argument(
        "--image-type",
        help="The type of image",
        choices=["ubuntu", "azure-linux"],
        default="azure-linux",
    )

    parser.add_argument(
        "--region",
        help="The region to use for the container",
        default="northeurope",
    )

    parser.add_argument(
        "--cpus",
        type=int,
        help="The number of CPUs to allocate to the container",
        default=4,
    )
    
    parser.add_argument(
        "--ram",
        type=int,
        help="The amount of RAM (GB) to allocate to the container",
        default=16,
    )


    args = parser.parse_args()

    if args.azure_auth:
        run_aci_azure_image(args)
    else:
        run_aci_public_image(args)

    run(
        [
            "az",
            "container",
            "show",
            "--resource-group",
            args.resource_group,
            "--name",
            args.name,
            "--query",
            "ipAddress.ip",
        ]
    )
