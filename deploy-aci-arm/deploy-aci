#!/usr/bin/env python3

import argparse
import sys
import os
import shlex

from subprocess import run, PIPE


def image_is_available(image):
    rc = run(
        ["docker", "manifest", "inspect", f"{image}".format(image)], capture_output=True
    )
    return rc.returncode == 0


def get_ssh_key(ssh_key):
    with open(os.path.expanduser(ssh_key), "r") as f:
        return f.read().strip()


def run_aci_public_image(args):
    az_cmd = [
        "az", "deployment", "group", "create",
        "--resource-group", args.resource_group,
        "--template-file", "public-template.json",
        "--parameters", f"image={args.image}",
        "--parameters", f"ssh={get_ssh_key(args.ssh_key)}",
        "--parameters", f"name={args.name}",
    ]
    print("Running:")
    print(shlex.join(az_cmd))
    run(az_cmd, check=True)


def run_aci_private_image(args):
    acr = args.image.split(".azurecr.io")[0]
    acr_token_cmd =[
        "az", "acr", "login",
        "--name", acr,
        "--expose-token",
        "--output", "tsv",
        "--query", "accessToken",
    ]
     
    acr_token = (
        run(
            acr_token_cmd,
            check=True,
            stdout=PIPE,
        )
        .stdout.strip()
        .decode("utf-8")
    )
    az_cmd = [
        "az", "deployment", "group", "create",
        "--resource-group", "args.resource_group",
        "--template-file", "private-template.json",
        "--parameters", f"image={args.image}",
        "--parameters", f"ssh={get_ssh_key(args.ssh_key)}",
        "--parameters", f"name={args.name}",
        "--parameters", f"acr={acr}",
        "--parameters", f"acr_token={acr_token}",
    ]
    print("Running:")
    print(shlex.join(az_cmd))
    run(az_cmd, check=True)


def default_container_name():
    return f"{os.getlogin()}-test-{os.urandom(2).hex()}"


if __name__ == "__main__":
    parser = argparse.ArgumentParser(
        description="Start up a ACI container using the suppplied image"
    )
    parser.add_argument(
        "--image", help="The image to use for the container", required=True
    )
    parser.add_argument(
        "--resource-group",
        help="The resource group to use for the container",
        required=True,
    )
    parser.add_argument(
        "--ssh-key",
        help="The ssh key to use for the container",
        default="~/.ssh/id_rsa.pub",
    )
    parser.add_argument(
        "--name",
        help="The name to use for the container",
        default=default_container_name(),
    )
    args = parser.parse_args()

    if image_is_available(args.image):
        print(f"Image {args.image} is public")
        run_aci_public_image(args)
    else:
        print(f"Image {args.image} is private")
        run_aci_private_image(args)

    run(
        [
            "az",
            "container",
            "show",
            "--resource-group",
            args.resource_group,
            "--name",
            args.name,
            "--query",
            "ipAddress.ip",
        ]
    )
