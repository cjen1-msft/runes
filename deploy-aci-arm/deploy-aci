#!/usr/bin/env python3

import argparse
import sys
import os
import shlex
import arm_template_builder as tb
import tempfile

from subprocess import run, PIPE

from enum import Enum

def get_ssh_key(ssh_key):
    with open(os.path.expanduser(ssh_key), "r") as f:
        return f.read().strip()


def default_container_name():
    return f"test-{os.urandom(2).hex()}"


if __name__ == "__main__":
    parser = argparse.ArgumentParser(
        description="Start up a ACI container using the suppplied image"
    )
    parser.add_argument(
        "--image", help="The image to use for the container", required=True
    )
    parser.add_argument(
        "--azure-auth", help="Use az command to do authentication", action="store_true"
    )
    parser.add_argument(
        "--resource-group",
        help="The resource group to use for the container",
        required=True,
    )
    parser.add_argument(
        "--ssh-key",
        help="The ssh key to use for the container",
        default="~/.ssh/id_rsa.pub",
    )
    parser.add_argument(
        "--name",
        help="The name to use for the container",
        default=default_container_name(),
    )

    parser.add_argument(
        "--image-type",
        help="The type of image",
        choices=["ubuntu", "azure-linux"],
        default="azure-linux",
    )

    parser.add_argument(
        "--region",
        help="The region to use for the container",
        default="northeurope",
    )

    parser.add_argument(
        "--cpus",
        type=int,
        help="The number of CPUs to allocate to the container",
        default=4,
    )
    
    parser.add_argument(
        "--ram",
        type=int,
        help="The amount of RAM (GB) to allocate to the container",
        default=16,
    )


    args = parser.parse_args()

    deployment = tb.CACIDeployment(
        args.name,
        args.region,
        sshkey=get_ssh_key(args.ssh_key),
        containers=[
            tb.CACI(
                name=f"{args.name}-0",
                image=args.image,
                cpu=args.cpus,
                ram=args.ram,
            )
        ]
    )


    with tempfile.NamedTemporaryFile() as tempf:
        dep_json = deployment.to_json()
        print(dep_json)
        tempf.write(dep_json.encode("utf-8"))
        tempf.flush()

        az_cmd = [
            "az", "deployment", "group", "create",
            "--resource-group", args.resource_group,
            "--template-file", tempf.name,
        ]
        print("Running:")
        print(shlex.join(az_cmd))
        run(az_cmd, check=True)

    run(
        [
            "az",
            "container",
            "show",
            "--resource-group",
            args.resource_group,
            "--name",
            args.name,
            "--query",
            "ipAddress.ip",
        ]
    )
